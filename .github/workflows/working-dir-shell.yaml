name: Build, Scan, and Push Docker Images (Reusable)

on:
  workflow_call:

jobs:
  detect-updates:
    runs-on: self-hosted
    outputs:
      matrix: ${{ steps.detect-configs.outputs.matrix }}
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect updated docker-config files in PR
        id: detect-configs
        run: |  
          BASE_BRANCH="origin/${{ github.base_ref }}"
          git fetch origin ${{ github.base_ref }}
          UPDATED_FILES=$(git diff --name-only --diff-filter=AMCR "$BASE_BRANCH" HEAD | grep "docker-config.*\.yaml" || true)

          if [[ -z "$UPDATED_FILES" ]]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON_ARRAY=$(echo "$UPDATED_FILES" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "matrix=$JSON_ARRAY" >> $GITHUB_OUTPUT
          fi

  build:
    needs: detect-updates
    runs-on: self-hosted
    if: needs.detect-updates.outputs.matrix != '[]'
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Variables from Config File
        uses: muna1991/Action-Demo/.github/actions/extract-config-file@main
        with:
          config_file: ${{ matrix.config_file }}

      - name: Validate Dockerfile Path
        run: |
          if [[ ! -f "$dockerfile_location" ]]; then
            echo "‚ùå Dockerfile not found at $dockerfile_location. Exiting."
            exit 1
          fi

      - name: Build Docker Image
        run: |
          IMAGE_TAG="$account_name/$ecr_repo_name:$docker_image_tag"
          echo "üöÄ Building Docker image: $IMAGE_TAG"
          docker build --no-cache -t "$IMAGE_TAG" -f "$dockerfile_location" .
          echo "‚úÖ Successfully built: $IMAGE_TAG"

  scan:
    needs: ["build", "detect-updates"]
    runs-on: self-hosted
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Variables from Config File
        uses: muna1991/Action-Demo/.github/actions/extract-config-file@main
        with:
          config_file: ${{ matrix.config_file }}

      - name: Run Trivy Vulnerability Scan
        run: |
          IMAGE_TAG="$account_name/$ecr_repo_name:$docker_image_tag"
          echo "üîç Running Trivy scan on $IMAGE_TAG..."
          trivy image --format table --ignore-unfixed --pkg-types os,library --severity HIGH,CRITICAL "$IMAGE_TAG" | tee trivy-results-$docker_image_tag.txt
          VULN_COUNT=$(trivy image --format json --ignore-unfixed --pkg-types os,library --severity HIGH,CRITICAL "$IMAGE_TAG" | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length')
          echo "üõë Detected HIGH/CRITICAL vulnerabilities: $VULN_COUNT"
          if [[ "$skip_vulnerability_check" == "true" ]]; then
            echo "‚ö†Ô∏è Skipping vulnerability enforcement."
          else
            if [[ "$VULN_COUNT" -gt 0 ]]; then
              echo "‚ùå Vulnerabilities found. Failing the job."
              exit 1
            fi
          fi

  push:
    needs: ["scan", "detect-updates"]
    runs-on: self-hosted
    environment:
      name: Release # Manual approval is required here
    strategy:
      matrix:
        config_file: ${{ fromJson(needs.detect-updates.outputs.matrix || '[]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Variables from Config File
        uses: muna1991/Action-Demo/.github/actions/extract-config-file@main
        with:
          config_file: ${{ matrix.config_file }}
      # - name: Log in to AWS ECR
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Push Docker Image
      #   run: |
      #     IMAGE_TAG="$account_name/$ecr_repo_name:$docker_image_tag"
      #     ECR_URI="$account_name.dkr.ecr.$region.amazonaws.com/$ecr_repo_name:$docker_image_tag"
      #     echo "üöÄ Tagging image as $ECR_URI"
      #     docker tag "$IMAGE_TAG" "$ECR_URI"
      #     echo "üì§ Pushing image to ECR..."
      #     docker push "$ECR_URI"
      - name: Push Docker Image
        run: |
          echo "Pushing Docker images"